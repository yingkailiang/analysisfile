// Generated by CoffeeScript 1.6.3
(function() {
  var milestone_number, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  milestone_number = 0;

  this.AssigneeModel = (function(_super) {
    __extends(AssigneeModel, _super);

    function AssigneeModel() {
      _ref = AssigneeModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return AssigneeModel;

  })(Backbone.Model);

  this.AssigneeCollection = (function(_super) {
    __extends(AssigneeCollection, _super);

    function AssigneeCollection() {
      _ref1 = AssigneeCollection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    AssigneeCollection.prototype.model = AssigneeModel;

    AssigneeCollection.prototype.initialize = function(options) {
      var repository;
      repository = options.repository;
      return this.url = "https://api.github.com/repos/" + (repository.get('full_name')) + "/assignees";
    };

    return AssigneeCollection;

  })(Backbone.Collection);

  this.MilestoneModel = (function(_super) {
    __extends(MilestoneModel, _super);

    function MilestoneModel() {
      _ref2 = MilestoneModel.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    return MilestoneModel;

  })(Backbone.Model);

  this.MilestoneCollection = (function(_super) {
    __extends(MilestoneCollection, _super);

    function MilestoneCollection() {
      _ref3 = MilestoneCollection.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    MilestoneCollection.prototype.model = MilestoneModel;

    MilestoneCollection.prototype.initialize = function(options) {
      var repository;
      repository = options.repository;
      return this.url = "https://api.github.com/repos/" + (repository.get('full_name')) + "/milestones";
    };

    return MilestoneCollection;

  })(Backbone.Collection);

  this.NewIssueView = (function(_super) {
    __extends(NewIssueView, _super);

    function NewIssueView() {
      _ref4 = NewIssueView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    NewIssueView.prototype.className = 'new-issue';

    NewIssueView.prototype.events = {
      "submit form": "onSubmit",
      "change #repo_list": "changeMenu",
      "load document": "changeMenu"
    };

    NewIssueView.prototype.initialize = function(options) {
      this.options = options;
      return this.repositories = this.options.repositories;
    };

    NewIssueView.prototype.render = function() {
      this.$el.html(HAML['new_issue']({
        repositories: this.repositories
      }));
      return this.$('select').select2();
    };

    NewIssueView.prototype.onSubmit = function(e) {
      var assignee_name, mile_name, model, name, repository,
        _this = this;
      e.preventDefault();
      name = this.$("[name=repository]").val();
      assignee_name = this.$("[name=assignee]").val();
      mile_name = this.$("[name=milestone]").val();
      localStorage['new_issue_last_repo'] = name;
      repository = this.repositories.find(function(r) {
        return r.get('full_name') === name;
      });
      model = new IssueModel({
        body: this.$("[name=body]").val(),
        title: this.$("[name=title]").val()
      }, {
        repository: repository
      });
      model.set({
        'assignee': assignee_name,
        'milestone': milestone_number
      });
      return model.save({}, {
        success: function(model) {
          _this.badge = new Badge();
          _this.badge.addIssues(1);
          return _this.$('.message').html("<span>Issue <a href=\"" + (model.get("html_url")) + "\" target=\"_blank\">#" + (model.get('number')) + "</a> was created!</span>");
        },
        error: function() {
          return _this.$('.message').html("<span>Failed to create issue :(</span>");
        }
      });
    };

    NewIssueView.prototype.changeMenu = function(e) {
      var name, repository, url,
        _this = this;
      e.preventDefault();
      this.$('#assignee').empty();
      name = this.$("[name=repository]").val();
      repository = this.repositories.find(function(r) {
        return r.get('full_name') === name;
      });
      url = repository.assigneesUrl();
      this.assigneeCollection = new AssigneeCollection({
        repository: repository
      });
      this.assigneeCollection.fetch({
        success: function(collection) {
          var asg, opt, _i, _len, _ref5, _results;
          _ref5 = _this.assigneeCollection.models;
          _results = [];
          for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
            asg = _ref5[_i];
            opt = document.createElement("option");
            opt.value = asg.get("login");
            opt.text = asg.get("login");
            _results.push(_this.$('#assignee').append(opt));
          }
          return _results;
        },
        error: this.renderErrors
      });
      this.milestoneCollection = new MilestoneCollection({
        repository: repository
      });
      return this.milestoneCollection.fetch({
        success: function(collection) {
          var msg, opt, _i, _len, _ref5, _results;
          _ref5 = _this.milestoneCollection.models;
          _results = [];
          for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
            msg = _ref5[_i];
            opt = document.createElement("option");
            opt.value = msg.get("title");
            opt.text = msg.get("title");
            _this.$('#milestone').append(opt);
            _results.push(milestone_number = msg.get("number"));
          }
          return _results;
        },
        error: this.renderErrors
      });
    };

    return NewIssueView;

  })(Backbone.View);

}).call(this);
