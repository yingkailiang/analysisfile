// Generated by CoffeeScript 1.4.0
(function() {

  window.GetCreative = (function() {

    function GetCreative() {
      this.content = $('#content');
    }

    GetCreative.prototype.init = function() {
      var _this = this;
      this.login_passive(function(data) {
        if (data.error) {
          window.track_event('login_passive', 'error', data.error);
          if (data.error === "user banned") {
            return window.show_error("This account has been banned");
          } else if (data.error === "ip banned") {
            return window.show_error("This IP address has been banned");
          } else {
            window.show_error(data.error);
            return window.storage.remove("guid");
          }
        } else {
          window.track_event('login_passive', 'success');
          return window.storage.set("guid", data.guid, function() {
            if (!window.IS_WEB) {
              return _this.open_default_challenge(data.challenge_id);
            }
          });
        }
      });
      this.load_page();
      if (!window.IS_WEB) {
        return this.delegate_links();
      }
    };

    GetCreative.prototype.load_page = function() {
      var ajax_loader,
        _this = this;
      ajax_loader = function(url) {
        return _this.load_internal_url(url);
      };
      this.current_page = new window.Page(ajax_loader);
      return this.current_page.init();
    };

    GetCreative.prototype.replace_content = function(html) {
      $(window).scrollTop(0);
      this.current_page.unbind();
      this.content.empty();
      this.content.append(html);
      return this.load_page();
    };

    GetCreative.prototype.delegate_links = function() {
      var self;
      self = this;
      return $("body").on("click", "a.js_link", function() {
        var href;
        href = $(this).attr("href");
        self.load_internal_url("/api" + href);
        return false;
      }).on("click", "a.js_external_link", function() {
        var href;
        href = $(this).attr("href");
        self.load_external_url("" + href);
        return false;
      });
    };

    GetCreative.prototype.load_internal_url = function(relative_url) {
      var _this = this;
      return $.ajax({
        url: "" + relative_url,
        type: "GET",
        success: function(html) {
          window.track_pageview(relative_url);
          window.track_event('load_url', 'success', relative_url);
          return _this.replace_content(html);
        },
        error: function(xhr, status) {
          window.track_event('load_url', 'error', "" + xhr.status + " - " + status);
          return window.show_error("Your request failed with a code " + xhr.status + ". Please try again in a bit.");
        }
      });
    };

    GetCreative.prototype.load_external_url = function(url) {
      window.track_event('exit_extension', url);
      if (window.IS_EXTENSION && window.parent) {
        return window.parent.postMessage(url, "*");
      }
    };

    GetCreative.prototype.get_challenge = function(id, is_in_progress) {
      if (is_in_progress == null) {
        is_in_progress = false;
      }
      return this.load_internal_url("/api/id/" + id);
    };

    GetCreative.prototype.open_default_challenge = function(default_id) {
      var _this = this;
      if (!default_id) {
        return window.show_error("We couldn't find any challenges to show you.");
      }
      if (window.BADGE_COUNT) {
        return this.get_challenge(default_id);
      } else {
        return this.get_in_progress_challenge_id(function(id) {
          if (id != null) {
            return _this.get_challenge(id, true);
          } else {
            return _this.get_challenge(default_id);
          }
        });
      }
    };

    GetCreative.prototype.login_passive = function(success) {
      var _this = this;
      return window.storage.get_many(["guid", "username", "password_hash"], function(items) {
        return $.ajax({
          url: "/api/login_passive",
          type: "POST",
          dataType: "json",
          data: {
            guid: items.guid,
            username: items.username,
            password_hash: items.password_hash
          },
          success: success,
          error: function(xhr, status) {
            window.track_event('login_passive', 'error', "" + xhr.status + " - " + status);
            return window.show_error("Your request failed. Please try again in a bit.");
          }
        });
      });
    };

    GetCreative.prototype.get_in_progress_challenge_id = function(callback) {
      return window.storage.get("in_progress_id", function(id) {
        return callback(id);
      });
    };

    GetCreative.prototype.remove_in_progress = function() {
      return window.storage.remove("in_progress_id");
    };

    return GetCreative;

  })();

}).call(this);
