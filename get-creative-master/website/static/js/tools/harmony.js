// Generated by CoffeeScript 1.4.0
(function() {
  var BG_COLOR, COMPOSITE, FG_COLOR, OFFSET, OPACITY, THRESHOLD,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  FG_COLOR = [50, 0, 0];

  BG_COLOR = [245, 242, 240];

  OPACITY = 0.075;

  THRESHOLD = 1000;

  OFFSET = 0.3;

  COMPOSITE = 'darker';

  window.Brush = (function() {

    function Brush(context) {
      this.context = context;
      this.context.lineWidth = 1;
      this.context.globalCompositeOperation = COMPOSITE;
      this.points = [];
      this.count = 0;
    }

    Brush.prototype.stroke_start = function(mouse_x, mouse_y) {
      this.prev_mouse_x = mouse_x;
      return this.prev_mouse_y = mouse_y;
    };

    Brush.prototype.stroke = function(mouse_x, mouse_y) {
      var d, dx, dy, i, _i, _ref;
      this.points.push([mouse_x, mouse_y]);
      this.context.strokeStyle = "rgba(" + FG_COLOR[0] + ", " + FG_COLOR[1] + ", " + FG_COLOR[2] + ", " + OPACITY + ")";
      this.context.beginPath();
      this.context.moveTo(this.prev_mouse_x, this.prev_mouse_y);
      this.context.lineTo(mouse_x, mouse_y);
      this.context.stroke();
      for (i = _i = 0, _ref = this.points.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        dx = this.points[i][0] - this.points[this.count][0];
        dy = this.points[i][1] - this.points[this.count][1];
        d = dx * dx + dy * dy;
        if (d < 4000 && Math.random() > d / 2000) {
          if (Math.random() > 0.05) {
            this.context.strokeStyle = "rgba(" + (Math.floor(Math.random() * FG_COLOR[0])) + ", " + (Math.floor(Math.random() * FG_COLOR[1])) + ", " + (Math.floor(Math.random() * FG_COLOR[2])) + ", " + OPACITY + ")";
          } else {
            this.context.strokeStyle = "rgba(" + BG_COLOR[0] + ", " + BG_COLOR[1] + ", " + BG_COLOR[2] + ", 0.2)";
          }
          this.context.beginPath();
          this.context.moveTo(this.points[this.count][0] + (dx * OFFSET), this.points[this.count][1] + (dy * OFFSET));
          this.context.lineTo(this.points[i][0] - (dx * OFFSET), this.points[i][1] - (dy * OFFSET));
          this.context.stroke();
        }
      }
      this.prev_mouse_x = mouse_x;
      this.prev_mouse_y = mouse_y;
      return this.count += 1;
    };

    return Brush;

  })();

  window.Harmony = (function(_super) {

    __extends(Harmony, _super);

    function Harmony(parent_node, save_state_handler) {
      this.parent_node = parent_node;
      this.save_state_handler = save_state_handler;
      this.name = "harmony";
      this.canvas = this.parent_node.find('canvas');
      this.context = this.canvas[0].getContext('2d');
      this.brush = new Brush(this.context);
      this._clear();
      this._bind();
    }

    Harmony.prototype._clear = function() {
      this.context.fillStyle = "rgb(" + BG_COLOR[0] + ", " + BG_COLOR[1] + ", " + BG_COLOR[2] + ")";
      return this.context.fillRect(0, 0, this.canvas[0].width, this.canvas[0].height);
    };

    Harmony.prototype._bind = function() {
      var do_stroke, offset,
        _this = this;
      offset = this.canvas.offset();
      do_stroke = function(e) {
        var x, y;
        if (!_this.mouse_is_down) {
          return;
        }
        if (!_this.ready) {
          _this.ready = true;
          window.track_event(_this.name, 'start');
          _this.started_time = new Date().getTime();
        }
        x = e.pageX - offset.left;
        y = e.pageY - offset.top;
        return _this.brush.stroke(x, y);
      };
      this.canvas.on('mouseenter', function(e) {
        var x, y;
        x = e.pageX - offset.left;
        y = e.pageY - offset.top;
        return _this.brush.stroke_start(x, y);
      });
      this.canvas.on('mousedown', function(e) {
        var x, y;
        if (e.button !== 0) {
          return;
        }
        x = e.pageX - offset.left;
        y = e.pageY - offset.top;
        _this.brush.stroke_start(x, y);
        _this.mouse_is_down = true;
        return false;
      });
      $(window).on('mouseup.harmony', function(e) {
        if (!(e.button === 0 && _this.mouse_is_down)) {
          return;
        }
        _this.save_state_handler(_this.name);
        return _this.mouse_is_down = false;
      });
      return this.canvas.on('mousemove', do_stroke);
    };

    Harmony.prototype.unbind = function() {
      var now, seconds_elapsed;
      if (this.ready) {
        now = new Date().getTime();
        seconds_elapsed = Math.round((now - this.started_time) / 1000);
        window.track_event(this.name, 'store', seconds_elapsed);
      }
      this.canvas.off("mouseenter mousedown mousemove");
      return $(window).off("mouseup.harmony");
    };

    Harmony.prototype.submit_is_valid = function() {
      if (this.ready) {
        return true;
      }
    };

    Harmony.prototype.get_state_data = function() {
      return this.canvas[0].toDataURL("image/png");
    };

    Harmony.prototype.get_submit_data = function() {
      var now, seconds_elapsed;
      now = new Date().getTime();
      seconds_elapsed = Math.round((now - this.started_time) / 1000);
      window.track_event(this.name, 'finish', seconds_elapsed);
      return this.get_state_data();
    };

    Harmony.prototype.set_state_data = function(data) {
      var img,
        _this = this;
      img = new Image();
      img.src = data;
      return setTimeout(function() {
        _this.context.drawImage(img, 0, 0);
        _this.ready = true;
        return window.track_event(_this.name, 'continue');
      }, 100);
    };

    return Harmony;

  })(window.Tool);

}).call(this);
