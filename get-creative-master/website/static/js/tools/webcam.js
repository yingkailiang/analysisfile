// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Webcam = (function(_super) {

    __extends(Webcam, _super);

    function Webcam(parent_node) {
      var _this = this;
      this.parent_node = parent_node;
      this.name = "webcam";
      this.width = 320;
      this.height = 240;
      this.photo_ready = false;
      this.find_nodes();
      this.image_data_pos = 0;
      this.start_webcam(function() {
        return _this.bind();
      });
    }

    Webcam.prototype.find_nodes = function() {
      this.nodes = {
        canvas: this.parent_node.find("canvas"),
        flash_parent: this.parent_node.find(".flash"),
        snapshot_button: this.parent_node.find("button.snapshot"),
        clear_button: this.parent_node.find("button.clear")
      };
      this.nodes.canvas.attr("width", this.width);
      this.nodes.canvas.attr("height", this.height);
      this.context = this.nodes.canvas[0].getContext('2d');
      this.image_data_array = this.context.getImageData(0, 0, this.width, this.height);
      return this.nodes.canvas.hide();
    };

    Webcam.prototype.bind = function() {
      var _this = this;
      this.nodes.snapshot_button.on("click", function() {
        window.track_event(_this.name, 'snap');
        window.webcam.capture();
        return _this.toggle_buttons();
      });
      return this.nodes.clear_button.on("click", function() {
        window.track_event(_this.name, 'clear');
        _this.nodes.canvas.hide();
        _this.photo_ready = false;
        return _this.toggle_buttons();
      });
    };

    Webcam.prototype.toggle_buttons = function() {
      this.nodes.snapshot_button.toggle();
      return this.nodes.clear_button.toggle();
    };

    Webcam.prototype.unbind = function() {
      this.nodes.snapshot_button.off("click");
      return this.nodes.clear_button.off("click");
    };

    Webcam.prototype.save_data_from_flash = function(data) {
      var col, i, tmp, _i;
      col = data.split(";");
      for (i = _i = 0; _i < 320; i = ++_i) {
        tmp = parseInt(col[i]);
        this.image_data_array.data[this.image_data_pos + 0] = (tmp >> 16) & 0xFF;
        this.image_data_array.data[this.image_data_pos + 1] = (tmp >> 8) & 0xFF;
        this.image_data_array.data[this.image_data_pos + 2] = tmp & 0xFF;
        this.image_data_array.data[this.image_data_pos + 3] = 0xFF;
        this.image_data_pos += 4;
      }
      if (this.image_data_pos >= 4 * 320 * 240) {
        this.context.putImageData(this.image_data_array, 0, 0);
        this.image_data_pos = 0;
        this.nodes.canvas.show();
        return this.photo_ready = true;
      }
    };

    Webcam.prototype.start_webcam = function(callback) {
      var _this = this;
      return this.nodes.flash_parent.webcam({
        width: 500,
        height: 375,
        mode: "callback",
        swffile: "https://s3.amazonaws.com/get-creative/swf/jscam_canvas_only.swf",
        debug: function(type, string) {},
        onLoad: function() {
          return callback();
        },
        onCapture: function() {
          return window.webcam.save();
        },
        onSave: function(data) {
          return _this.save_data_from_flash(data);
        }
      });
    };

    Webcam.prototype.submit_is_valid = function() {
      return this.photo_ready;
    };

    Webcam.prototype.get_submit_data = function() {
      if (!this.submit_is_valid()) {
        return;
      }
      window.track_event(this.name, 'finish');
      return this.nodes.canvas[0].toDataURL('image/png');
    };

    return Webcam;

  })(window.Tool);

}).call(this);
