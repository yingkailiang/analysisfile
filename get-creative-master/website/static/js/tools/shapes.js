// Generated by CoffeeScript 1.4.0
(function() {
  var BG_COLOR,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  BG_COLOR = [255, 255, 255];

  window.Shapes = (function(_super) {

    __extends(Shapes, _super);

    function Shapes(parent_node, save_state_handler) {
      this.parent_node = parent_node;
      this.save_state_handler = save_state_handler;
      this.opacity = 1;
      this._find_nodes();
      this._init_canvas();
      this._bind();
      $(this.color_list_nodes[0]).trigger("click");
    }

    Shapes.prototype._find_nodes = function() {
      this.preview_canvas = this.parent_node.find('canvas.preview');
      this.preview_context = this.preview_canvas[0].getContext('2d');
      this.canvas = this.parent_node.find('canvas.final');
      this.context = this.canvas[0].getContext('2d');
      this.color_list_nodes = this.parent_node.find("ul.color_list li");
      return this.opacity_node = this.parent_node.find("input.opacity");
    };

    Shapes.prototype._init_canvas = function() {
      this.context.fillStyle = "rgb(" + BG_COLOR[0] + ", " + BG_COLOR[1] + ", " + BG_COLOR[2] + ")";
      return this.context.fillRect(0, 0, this.canvas[0].width, this.canvas[0].height);
    };

    Shapes.prototype._clear_preview_canvas = function() {
      return this.preview_context.clearRect(0, 0, this.preview_canvas[0].width, this.preview_canvas[0].height);
    };

    Shapes.prototype._draw_shape_to_context = function(context, x1, y1, x2, y2) {};

    Shapes.prototype._preview_shape = function(x1, y1, x2, y2) {
      this._clear_preview_canvas();
      return this._draw_shape_to_context.apply(this, [this.preview_context].concat(__slice.call(arguments)));
    };

    Shapes.prototype._commit_shape = function(x1, y1, x2, y2) {
      this._clear_preview_canvas();
      this._draw_shape_to_context.apply(this, [this.context].concat(__slice.call(arguments)));
      return this.save_state_handler(this.name);
    };

    Shapes.prototype._bind = function() {
      var offset, self,
        _this = this;
      self = this;
      this.color_list_nodes.on('click', function(list_click) {
        var color, li;
        li = $(this);
        self.color_list_nodes.removeClass("active");
        li.addClass("active");
        color = li.data("color");
        return self.color = color;
      });
      this.opacity_node.on("change", function() {
        return _this.opacity = _this.opacity_node.val();
      });
      offset = this.canvas.offset();
      this.preview_canvas.on('mousedown', function(e) {
        var x, y;
        if (e.button !== 0) {
          return;
        }
        x = e.pageX - offset.left;
        y = e.pageY - offset.top;
        _this.start_x = x;
        _this.start_y = y;
        _this.mouse_is_down = true;
        return false;
      });
      $(window).on('mousemove', function(e) {
        var x, y;
        if (!_this.mouse_is_down) {
          return;
        }
        if (!_this.ready) {
          _this.ready = true;
          window.track_event(_this.name, 'start');
          _this.started_time = new Date().getTime();
        }
        x = e.pageX - offset.left;
        y = e.pageY - offset.top;
        return _this._preview_shape(_this.start_x, _this.start_y, x, y);
      });
      return $(window).on("mouseup." + this.name, function(e) {
        var x, y;
        if (!(e.button === 0 && _this.mouse_is_down)) {
          return;
        }
        _this.mouse_is_down = false;
        x = e.pageX - offset.left;
        y = e.pageY - offset.top;
        return _this._commit_shape(_this.start_x, _this.start_y, x, y);
      });
    };

    Shapes.prototype.unbind = function() {
      var now, seconds_elapsed;
      if (this.ready) {
        now = new Date().getTime();
        seconds_elapsed = Math.round((now - this.started_time) / 1000);
        window.track_event(this.name, 'store', seconds_elapsed);
      }
      this.preview_canvas.off("mouseenter mousedown mousemove");
      return $(window).off("mouseup." + this.name);
    };

    Shapes.prototype.submit_is_valid = function() {
      if (this.ready) {
        return true;
      }
    };

    Shapes.prototype.get_state_data = function() {
      return this.canvas[0].toDataURL("image/png");
    };

    Shapes.prototype.get_submit_data = function() {
      var now, seconds_elapsed;
      now = new Date().getTime();
      seconds_elapsed = Math.round((now - this.started_time) / 1000);
      window.track_event(this.name, 'finish', seconds_elapsed);
      return this.get_state_data();
    };

    Shapes.prototype.set_state_data = function(data) {
      var img,
        _this = this;
      img = new Image();
      img.src = data;
      return setTimeout(function() {
        _this.context.drawImage(img, 0, 0);
        _this.ready = true;
        return window.track_event(_this.name, 'continue');
      }, 100);
    };

    return Shapes;

  })(window.Tool);

}).call(this);
