// Generated by CoffeeScript 1.4.0
(function() {

  window.HTML5Storage = (function() {

    function HTML5Storage() {}

    HTML5Storage.prototype.get = function(property, callback, is_json) {
      var value;
      if (is_json == null) {
        is_json = false;
      }
      try {
        value = localStorage.getItem(property);
        if ((value != null) && is_json) {
          value = JSON.parse(value);
        }
        return callback(value);
      } catch (err) {
        window.track_event('storage_error', 'get', property);
        console.log("Error retrieving \"" + property + "\" from storage", err);
        throw err;
      }
    };

    HTML5Storage.prototype.get_many = function(properties, callback, is_json) {
      var items, property, value, _i, _len;
      if (is_json == null) {
        is_json = false;
      }
      try {
        items = {};
        for (_i = 0, _len = properties.length; _i < _len; _i++) {
          property = properties[_i];
          value = localStorage.getItem(property);
          if ((value != null) && is_json) {
            value = JSON.parse(value);
          }
          items[property] = value;
        }
        return callback(items);
      } catch (err) {
        window.track_event('storage_error', 'get_many', properties.join(", "));
        console.log("Error retrieving properties: \"" + properties + "\" from storage", err);
        throw err;
      }
    };

    HTML5Storage.prototype.set = function(property, value, callback, is_json) {
      if (is_json == null) {
        is_json = false;
      }
      callback = callback || function() {};
      try {
        if (is_json) {
          value = JSON.stringify(value);
        }
        localStorage.setItem(property, value);
        return callback();
      } catch (err) {
        window.track_event('storage_error', 'set', property);
        console.log("Error setting \"" + property + "\" to \"" + value + "\" in storage", err);
        throw err;
      }
    };

    HTML5Storage.prototype.set_many = function(pairs, callback, is_json) {
      var properties, property, value;
      if (is_json == null) {
        is_json = false;
      }
      callback = callback || function() {};
      try {
        for (property in pairs) {
          value = pairs[property];
          if (is_json) {
            value = JSON.stringify(value);
          }
          localStorage.setItem(property, value);
        }
        return callback();
      } catch (err) {
        properties = [];
        for (property in pairs) {
          value = pairs[property];
          properties.push(property);
        }
        window.track_event('storage_error', 'set_many', properties.join(", "));
        console.log("Error setting pairs \"" + pairs + "\" in storage", err);
        throw err;
      }
    };

    HTML5Storage.prototype.remove = function(property, callback) {
      if (callback == null) {
        callback = function() {};
      }
      try {
        localStorage.removeItem(property);
        return callback();
      } catch (err) {
        window.track_event('storage_error', 'remove', property);
        console.log("Error removing \"" + property + "\" from storage", err);
        throw err;
      }
    };

    HTML5Storage.prototype.remove_many = function(properties, callback) {
      var property, _i, _len;
      if (callback == null) {
        callback = function() {};
      }
      try {
        for (_i = 0, _len = properties.length; _i < _len; _i++) {
          property = properties[_i];
          localStorage.removeItem(property);
        }
        return callback();
      } catch (err) {
        window.track_event('storage_error', 'remove_many', properties.join(", "));
        console.log("Error removing \"" + properties + "\" from storage", err);
        throw err;
      }
    };

    return HTML5Storage;

  })();

}).call(this);
